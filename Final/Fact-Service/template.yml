AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
Description: Sets up an service for vending fact information. 
Parameters:
  FactType:
    Type: String
    Description: Name of the type of facts you will vend from the service. 
    Default: cat
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: staging

Resources:
  #Compute resources
  APIGatewayServiceLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'Fact-Vendor-Lambda-${Stage}'
      Handler: factVendorLambda.get
      CodeUri: s3://fact-service-build-info/fact-service.zip
      Runtime: nodejs10.x
      Environment:
        Variables:
          S3BucketName: {Ref: FactBucket}
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
  #API
  FactServiceAPIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API for the serverless fact service.
      Name: !Sub 'fact-api-${Stage}'
  APIGatewayResourcesFact:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt 
        - FactServiceAPIGateway
        - RootResourceId
      PathPart: fact
      RestApiId: !Ref "FactServiceAPIGateway"
  APIGatewayMethod:
    Type: "AWS::ApiGateway::Method"
    DependsOn: 
      - APIGatewayResourcesFact
    Properties:
      AuthorizationType: "NONE"
      HttpMethod: "POST"
      OperationName: getFact
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations"
          - lambdaArn: !GetAtt "APIGatewayServiceLambda.Arn"
      ResourceId: !Ref "APIGatewayResourcesFact"
      RestApiId: !Ref "FactServiceAPIGateway"
  # APIGatewayStage:
  #   Type: AWS::ApiGateway::Stage
  #   Properties:
  #     Description: !Sub "${Stage} Stage"
  #     RestApiId: !Ref FactServiceAPIGateway
  #     DeploymentId: !Ref APIGatewayDeployment
  #     Variables:
  #       Stack: !Sub "${Stage}"
  #     MethodSettings:
  #       - ResourcePath: /fact
  #         HttpMethod: GET
  APIGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn:
      - "APIGatewayMethod"
      - "APIGatewayResourcesFact"
    Properties:
      RestApiId: !Ref "FactServiceAPIGateway"
      StageName: !Sub "${Stage}"
  #Storage/DB
  FactBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: Private
  #Logs
  lambdaLogGroup:
    Type: "AWS::Logs::LogGroup"
    DependsOn: APIGatewayServiceLambda
    Properties:
      LogGroupName: !Sub "/aws/lambda/${APIGatewayServiceLambda}"
      RetentionInDays: 90
  #Roles
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${FactType}-service-lambda-role-${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: 
            - sts:AssumeRole
      # Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: ['cloudwatch:*', 'logs:*', 's3:GetObject', 'lambda:*']
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: lambdaExecutionPolicy
  #Permissions
  lambdaApiGatewayInvoke:
    Type: "AWS::Lambda::Permission"
    DependsOn: 
      - APIGatewayServiceLambda
      - FactServiceAPIGateway
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt "APIGatewayServiceLambda.Arn"
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${FactServiceAPIGateway}/*/POST/"
Outputs:
  apiGatewayInvokeURL:
    Value: !Sub "https://${FactServiceAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"